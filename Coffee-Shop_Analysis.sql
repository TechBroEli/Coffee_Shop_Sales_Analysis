-- THE COFFEE SHOP PROJECT --

CREATE TABLE Coffee_Shop (
transaction_id INT Primary Key,
transaction_date DATE,
transaction_time TIME,
transaction_Quantity INT,
store_id INT,
store_location VARCHAR,
product_id INT,
unit_price DECIMAL,
product_category VARCHAR,
product_type VARCHAR,
product_detail VARCHAR
);

Select * From Coffee_Shop;

Copy Coffee_Shop FROM 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PostgreSQL 17\CoffeeShopSales.csv' 
DELIMITER ',' CSV HEADER; 

/* 1) Product Sales Analysis: Top 5 Most Frequently Sold Products by Product Category
Purpose: Identify the most popular products to inform inventory management and marketing strategies. */

 -- Top 5 products with the highest sales frequency within each product category. --

Select distinct product_category
From Coffee_Shop; -- 9

WITH Ranked_Sales AS (
Select
		product_id,
		product_type,
		product_category,
		SUM(transaction_quantity) AS Total_Quantity_Sold,
		TO_CHAR(SUM(transaction_quantity * unit_price), 'L999,999,999') AS Total_Sales,
Rank() OVER (PARTITION BY product_category ORDER BY SUM(transaction_quantity) DESC) Sales_Rank
from Coffee_Shop
Group By product_id, product_type, product_category
)

Select * From Ranked_Sales
Where Sales_Rank <=5;

/* 2) Monthly Revenue Calculation: Total Revenue Generated by Each Store in January 2023
Purpose: Assess store performance and compare revenue across different locations for that month. */

-- Total revenue for each store during January 2023.--

Select distinct store_id
from Coffee_shop; -- 3

Select
	  store_id,
	  store_location,
	  SUM(transaction_quantity) AS Total_Quantity_SoldPerStore,
	  TO_CHAR(SUM(transaction_quantity * unit_price), 'L999,999,999') AS Total_SalesPerSotre
FROM Coffee_Shop
WHERE transaction_date BETWEEN '2023-01-01' and '2023-01-30'
Group By store_id, store_location
ORDER BY TO_CHAR(SUM(transaction_quantity * unit_price), 'L999,999,999') DESC;


/* 3) Product Variety in Specific Location: Unique Product Types Sold in 'Lower Manhattan' Store.
Purpose: Understand the product range available at this location to tailor offerings or promotions. */

-- List of all unique product type sold in the store located in Lower Manhattan. --

SELECT COUNT(DISTINCT product_type) AS Unique_ProductType
FROM Coffee_Shop
WHERE store_location = 'Lower Manhattan'; -- 29

Select distinct product_type
FROM Coffee_Shop
WHERE store_location = 'Lower Manhattan';


/* 4) Transaction Timing Analysis: Total Number of Transactions Before 12:00 PM.
Purpose: Optimise staffing and resource allocation during morning hours. */

-- Total number of transactions that occurred before 12:00 PM on any given day --

Select COUNT (*) As Trans_Bfr_Noon 
FROM Coffee_Shop
WHERE transaction_time < '12:00:00';

/* 5) Revenue Per Transaction Analysis: Average Revenue per Transaction for Each Product Category During Peak and Non-Peak Hours. 
Purpose: Understand customer spending patterns to adjust pricing or promotions accordingly. */
 
-- Average revenue per transaction for each product category during peak hours (7 AM - 9 AM)
and non-peak hours for each store. --

Select
	  COALESCE (a.store_id, b.store_id) AS store_id,
	  COALESCE (a.product_category, b.product_category) AS product_category,
	  a.AvgRev_PerTrans_Peak,
	  b.AvgRev_PerTrans_NonPeak
FROM (Select 
	  Store_id, Product_category,
	  ROUND(AVG(transaction_quantity * unit_price), 2) AS AvgRev_PerTrans_Peak
	  FROM Coffee_Shop
	  WHERE transaction_time BETWEEN '7:00:00' AND '9:00:00'
	  Group by product_category, store_id) a
FULL JOIN (Select 
	  store_id, Product_category,
	  ROUND(AVG(transaction_quantity * unit_price), 2) AS AvgRev_PerTrans_NonPeak
	  FROM Coffee_Shop
	  WHERE transaction_time NOT BETWEEN '7:00:00' AND '9:00:00'
	  Group by product_category, store_id) b
ON a.store_id=b.store_id AND a.product_category=b.product_category
ORDER BY store_id, product_category;


/* 6) Price Variability Analysis: Product with the Most Price Fluctuations
Purpose: Identify pricing inconsistencies or opportunities for price stabilisation. */

-- Products with the largest difference between its highest and lowest price across all transactions. --

Select
	  Product_category,
	  MAX(unit_price) AS Highest_price,
	  MIN(unit_price) AS Lowest_price,
	  MAX(unit_price) - MIN(unit_price) AS Price_Diff
FROM Coffee_Shop
GROUP BY product_category
ORDER BY Price_Diff DESC
Limit 1;

/* 7) Product Availability Across All Stores: Products Sold in Every Store at Least Once.
Purpose: Recognise core products that are essential across all locations. */

-- List of all products that have been sold in every store at least once. --

SELECT 
    product_id, 
    product_category,
    COUNT(DISTINCT store_id) AS Store
FROM Coffee_Shop
GROUP BY product_id, product_category
HAVING COUNT(DISTINCT store_id) = (SELECT COUNT(DISTINCT store_id) FROM Coffee_Shop);

/* 8) Transaction Quantity Deviations: Top 5 Days with the Highest Deviation from Average Daily Transaction Quantity
Purpose: Detect anomalies or events impacting sales volume for further investigation. */

-- Top 5 days where the total transaction quantity deviated the most from the average daily transaction quantity. --

Select * From Coffee_Shop;

-- DAILY TOTAL QUANTITY --
SELECT 
	   transaction_date,
	   SUM(transaction_quantity) AS Total_Qty
FROM Coffee_Shop
GROUP BY transaction_date; 

  -- DAILY AVERAGE QUANTITY --
SELECT ROUND(AVG(Total_Qty), 0) AS Avg_Qty
FROM (SELECT SUM(transaction_quantity) AS Total_Qty
        FROM Coffee_Shop
        GROUP BY transaction_date); -- 1185
    	
Select 
	  To_Char(a.transaction_date, 'MM-DD') AS Day,
	  a.Total_Qty,
	  ROUND(b.Avg_Qty, 0) AS Avg_Qty,
	  ROUND(ABS(a.Total_Qty::Numeric - b.Avg_Qty), 0) AS Deviation
FROM (SELECT 
	   transaction_date,
	   SUM(transaction_quantity) AS Total_Qty
	   FROM Coffee_Shop
	   GROUP BY transaction_date) a
CROSS JOIN (SELECT AVG(Total_Qty) AS Avg_Qty
		FROM (SELECT 
		SUM(transaction_quantity) AS Total_Qty
        FROM Coffee_Shop
        GROUP BY transaction_date)) b
ORDER BY Deviation DESC
Limit 5;

/* 9) High-Value Store Analysis: Store Location and Total Revenue Where Average Unit Price > $2.50.
Purpose: Focus on stores with higher-priced sales for targeted strategies. */ 

-- Store locations and total revenue for stores where the average unit price is greater than $2.50.

Select
	  store_id,
	  store_location,
	  ROUND(AVG(unit_price), 2) AS Avg_UnitPx,
	  TO_CHAR(SUM(transaction_quantity * unit_price), 'L999,999,999') AS Total_Rev
FROM Coffee_Shop
GROUP BY store_id, store_location
HAVING AVG(unit_price) > 2.50;

/* 10) Product Sales Efficiency: Product with the Highest Average Sales Quantity per Transaction in Each Store.
Purpose: Determine products that drive bulk purchases to enhance marketing efforts. */

-- Product that has the highest average quantity sold per transaction in each store. --

SELECT * FROM Coffee_Shop;

WITH AVG_TRANS AS (
Select
	  product_category,
	  Store_id AS Store,
	  ROUND(AVG(transaction_quantity), 2) AvgQty_Sold,
	  RANK() OVER (PARTITION BY store_id ORDER BY AVG(transaction_quantity)DESC) AS Rank
FROM Coffee_Shop
GROUP BY store_id, product_category
)
Select *
FROM AVG_TRANS
WHERE Rank = 1
Order by Store;